var About = React.createClass({displayName: "About",

		getInitialState: function (){
			return {
				content: this.props.content
			}
		},

		editState: function () {

			var NumberBlock = event.target.parentNode.getAttribute('name'),
				self = this;

			this.state.content.abouts.forEach(function (item, i) {
				if(item.number == NumberBlock){
					self.state.content.abouts.splice(i, 1);
				}
			})

			this.setState({
				content: this.state.content
			})
		},

		newAddInformation: function (descr, num) {

			var data = 'description='+descr+'&src='+null+'&number='+num,
				url = '/manage/About',
				method = 'POST',
				type = 'application/x-www-form-urlencoded';

			_controller_.OnlyAddNoResponseData(url, data, method, type, "About");

			this.state.content.abouts.push({description: descr, src: null, number: parseInt(num)})

			this.setState({
				content: this.state.content
			})
		},

		newAddImages: function(){
			var files = event.target.files[0],
				num = event.target.parentNode.getAttribute('name');
				url = '/manage/About',
				method = 'POST',
				self = this,
				type = null,
				actionName = 'About';
				
				 var reader = new FileReader();

				  reader.onload = (function(theFile) {
				    return function(e) {
				      	
				      	self.state.content.abouts.push({description: null, src: e.target.result, number: parseInt(num)})
				      	self.setState({
							content: self.state.content
						})

				    };
				  })(files);

			      reader.readAsDataURL(files);

			 _controller_.OnlyAddNoResponseData(url, {upload:files, number: parseInt(num)}, method, type, actionName);

			 

		},

		render: function () {
			var ArrayOfTemplateComponents = [],
				ArrayOfComponents = [],
				relate;

			for (var i = 1; i <= 6; i++) {
				if(relate = this.inArray(i)){
					ArrayOfTemplateComponents.push(React.createElement(TemplateForAboutBusy, {key: i+Math.random(), infoAdd: this.newAddInformation, edit: this.editState, content: relate, keys: i}));
				} else {
					ArrayOfTemplateComponents.push(React.createElement(TemplateForAbout, {key: i+Math.random(), imgAdd: this.newAddImages, infoAdd: this.newAddInformation, keys: i}));
				}
				if(i%2 == 0){
					ArrayOfComponents.push(React.createElement(TemplateOuterForAbout, {key: i+Math.random(), element: ArrayOfTemplateComponents}));
					ArrayOfTemplateComponents = [];
				}
			};

			return (
				React.createElement("div", {className: "About height-full"}, 
					React.createElement("h1", {className: "title-for-block"}, this.props.title), 
					React.createElement("div", {className: "outer-all-about-block"}, 
						ArrayOfComponents
					)
				)
			)
		},
		inArray: function(number){
			var ArrayOfContent = this.state.content;
			var returnArray = ArrayOfContent.abouts.filter(function (item, i) {
				if(item.number == number){
					return item;
				}
			});

			if(returnArray.length > 0){
				return returnArray;
			} else {
				return null;
			}
		}

	})

	var TemplateForAboutBusy = React.createClass({displayName: "TemplateForAboutBusy",
		render: function () {
			var description = this.props.content[0].description ? React.createElement("p", {className: "padding-text"}, this.props.content[0].description) : null,
				src = this.props.content[0].src ? React.createElement("img", {src: this.props.content[0].src}) : null;
			return (
				React.createElement("div", {className: "area-for-content", name: this.props.keys}, 
					description ? description : src, 
					React.createElement("i", {className: "fa fa-pencil edit-about-block", onClick: this.props.edit})
				)
			);
		}
	})

	var TemplateOuterForAbout = React.createClass({displayName: "TemplateOuterForAbout",
		render: function () {
			return (
				React.createElement("div", {className: "block-for-slides-campany"}, this.props.element)
			);
		}
	})

	var TemplateForAbout = React.createClass({displayName: "TemplateForAbout",
		getInitialState: function(){
			return {
				background: TemplateReady
			}
		},
		addText: function () {
			this.setState({
				background: TemplateToText
			})
		},
		returnPrevState: function(){
			this.setState({
				background: TemplateReady
			})
		},
		contentUpgrade: function(event){
			event.preventDefault();
			var descr = event.target.querySelector('[name="description"]').value,
				num = event.target.querySelector('[name="number"]').value;

			this.props.infoAdd(descr, num);
		},
		render: function () {
			return (
				React.createElement(this.state.background, {edit: this.returnPrevState, addImage: this.props.imgAdd, contentUpgrade: this.contentUpgrade, addText: this.addText, name: this.props.keys})	
			);
		}
	})

	var TemplateReady = React.createClass({displayName: "TemplateReady",

		render: function (){
			return (
				React.createElement("div", {className: "area-for-content"}, 
					React.createElement("div", {className: "padding-area"}, 
						React.createElement("button", {onClick: this.props.addText, className: "btn btn-info"}, "Добавить текст"), 
						React.createElement("p", null, "или"), 
						React.createElement("label", {htmlFor: "hidden_file", className: "btn btn-success", name: this.props.name}, 
							"Добавить изображение", 
							React.createElement("input", {onChange: this.props.addImage, name: "upload", type: "file", id: "hidden_file"})
						)
					)
				)
			);
		}
	})

	var TemplateToText = React.createClass({displayName: "TemplateToText",
		render: function(){
			return (
				React.createElement("div", {className: "area-for-content", name: this.props.name}, 
					React.createElement("i", {className: "fa fa-long-arrow-left edit-about-block", onClick: this.props.edit}), 
					React.createElement("form", {className: "to-text-form", onSubmit: this.props.contentUpgrade}, 
						React.createElement("p", null, "Добавить текст"), 
						React.createElement("textarea", {name: "description"}), 
						React.createElement("input", {type: "hidden", name: "number", value: this.props.name}), 
						React.createElement("button", {type: "submit", className: "btn btn-info"}, "Сохранить")
					)
				)
			)
		}
	});

allMyComponents['About'] = About;