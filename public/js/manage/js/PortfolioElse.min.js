var PortfolioElse = React.createClass({displayName: "PortfolioElse",
	
	getInitialState: function(){
		return {
			template: MainTemplateTableElse,
			content: this.props.content,
			lang: this.props.lang,
			translator: this.props.translator,
			id: null
		}
	},

	changeTemplateElse: function(edit, event){
		var id = (event && event.target && event.target.getAttribute('data-id-number')) || null;
		this.setState({
			template: edit,
			id: id
		})
	},

	componentWillReceiveProps: function(nextProps){
		this.setState({
			template: MainTemplateTableElse,
			content: nextProps.content
		})
	},

	render: function () {
		return (
			React.createElement("div", {className: "Portfolio height-full"}, 
				React.createElement("h1", {className: "title-for-block"}, this.props.title), 
				React.createElement(this.state.template, {id: this.state.id, data: this.state.content, translator: this.state.translator, lang: this.state.lang, change: this.changeTemplateElse})
			)
		)
	}
})

var MainTemplateTableElse = React.createClass({displayName: "MainTemplateTableElse",
	
	deleteItem: function(event){
		var _id = event.target.getAttribute("data-id-path"),
			type = 'application/x-www-form-urlencoded',
			url = '/manage/PortfolioElse',
			actionName = 'PortfolioElse';

		_controller_.OnlyDelete(_id, null, type, actionName, url);
	},

	render: function(){
		var translator = this.props.translator,
			edit = this.props.change.bind(null, PortfolioEditTemplateElse),
			add = this.props.change.bind(null, PortfolioAddTemplateElse),
			TableArray = this.props.data.length > 0 ? this.props.data.map(function(item, i){
				return (
						React.createElement("tr", {key: i}, 
							React.createElement("td", null, i + 1), 
							React.createElement("td", null, item['title_'+this.props.lang]), 
							React.createElement("td", null, React.createElement("img", {src: item.src[0]})), 
							React.createElement("td", null, 
								React.createElement("i", {className: "fa fa-pencil", "data-id-number": i, "data-id-path": item._id, "data-id-category": item.gallery_id, onClick: edit}), 
								React.createElement("i", {className: "fa fa-trash", "data-id-path": item._id, onClick: this.deleteItem})
							)
						)
					);
		}, this) : null;	
		return(
			React.createElement("div", {className: "outer-tebles"}, 
				React.createElement("button", {onClick: add, className: "button add-portfolio"}, translator.ADD_WORK), 
				React.createElement("table", {className: "table-for-portfolio table"}, 
					React.createElement("thead", null, 
						React.createElement("tr", {className: "default"}, 
							React.createElement("th", null, "#"), 
							React.createElement("th", null, translator.NAME_OF_PROJECT), 
							React.createElement("th", null, translator.PREVIEW), 
							React.createElement("th", null, translator.ACTIONS)
						)
					), 
					React.createElement("tbody", null, 
						TableArray
					)
				)
			)
		);
	}
})

var PortfolioAddTemplateElse = React.createClass({displayName: "PortfolioAddTemplateElse",
	
	getInitialState: function(){
		return {
			imagesContent: [],
			imagesArray: {},
			imageTemp: null,
			imageTitle: null
		}
	},

	deletePhoto: function(event){
		var identify = event.target.parentNode.getAttribute('name'),
			self = this;

		delete this.state.imagesArray[identify];

		var newPreloadPhoto = this.state.imagesContent.filter(eachContent);

		function eachContent(item, i){
			if(item.props.name != identify){
				return item
			}
		}

		this.setState({
			imagesContent: newPreloadPhoto,
			imagesArray: this.state.imagesArray
		})

	},

	addPhoto: function(event, files){


		var Files = (event && event.target && event.target.files) ? event.target.files : files,
			self = this;

		for (var i = 0; i < Files.length; i++) {
			
			var reader = new FileReader();

			reader.onload = (function(theFile) {
			return function(e) {

				var Random = Math.random().toString().slice(2);

				self.state.imagesArray[Random] = theFile;

				self.state.imagesContent.push(React.createElement("span", {key: i+Math.random(), name: Random}, React.createElement("img", {src: e.target.result}), React.createElement("i", {onClick: self.deletePhoto})));

			  	self.setState({
					imagesContent: self.state.imagesContent,
					imagesArray: self.state.imagesArray
				})

			};
			})(Files[i]);

			reader.readAsDataURL(Files[i]);
			
		};

		if(event && event.target){
			event.target.value = ''
		}


	},

	addFormGalery: function(event){
		event.preventDefault();

		var input = event.target.querySelectorAll('input[type="text"], select'),
			data = {},
			url = '/manage/PortfolioElse',
			method = 'POST',
			type = null,
			actionName = 'PortfolioElse';

		
		
		for (var i = 0; i < input.length; i++) {
			data[input[i].name] = input[i].value;
		};

		data['upload_galery_image'] = [];

		for (var i in this.state.imagesArray) {
			data['upload_galery_image'].push(this.state.imagesArray[i])
		};
		
		_controller_.OnlyAddNoResponseData(url, data, method, type, actionName);
		

	},

	onDragOver: function(event){
		event.preventDefault();
		event.stopPropagation();
		if(!this.refs.target.getDOMNode().classList.contains("-drag-start")){
			this.refs.target.getDOMNode().classList.add("-drag-start")
		}
	},

	onDrops: function(event){
		event.preventDefault();

		this.refs.target.getDOMNode().classList.remove("-drag-start")

		var files;
        if (event.dataTransfer) {
          files = event.dataTransfer.files;
        } else if (event.target) {
          files = event.target.files;
        }

        this.addPhoto(null,files);

	},

	onDragLeave: function(event){
		event.preventDefault();
		event.stopPropagation();
		this.refs.target.getDOMNode().classList.remove("-drag-start")
	},

	render: function(){
		var translator = this.props.translator;
		return (
			React.createElement("form", {onSubmit: this.addFormGalery}, 
				React.createElement("div", {className: "outer-to-add"}, 
					React.createElement("div", {className: "outer-levels-step"}, 
						React.createElement("div", {className: "right-to-desctiption right-to-desctiption-else"}, 
							React.createElement("input", {type: "text", className: "title-portfolio", name: "title_ru", placeholder: translator.NAME_OF_PROJECT_RU, required: "required"}), 
							React.createElement("input", {type: "text", className: "title-portfolio", name: "title_en", placeholder: translator.NAME_OF_PROJECT_EN, required: "required"}), 
							React.createElement("input", {type: "text", className: "description-portfolio", name: "description_ru", placeholder: translator.DESCRIPTION_RU, required: "required"}), 
							React.createElement("input", {type: "text", className: "description-portfolio", name: "description_en", placeholder: translator.DESCRIPTION_EN, required: "required"}), 
							React.createElement("input", {type: "text", className: "technology-portfolio", name: "technology", placeholder: translator.TECHNOLOGY, required: "required"}), 
							React.createElement("select", {name: "category", required: true}, 
								React.createElement("option", {value: "interior"}, translator.CATEGORY_INTERIOR), 
								React.createElement("option", {value: "art"}, translator.CATEGORY_ART)
							)
						)
					), 
					React.createElement("div", {className: "outer-all-photos"}, 
						React.createElement("h4", null, translator.ADD_GALLERY), 
						React.createElement("div", {draggable: "true", ref: "target", className: "add-many-images", onDragOver: this.onDragOver, onDrop: this.onDrops, onDragLeave: this.onDragLeave}, 
							React.createElement("div", {className: "area-of-drop"}, 
								React.createElement("h2", null, translator.MOVE_FILE), 
								React.createElement("p", null, translator.OR), 
								React.createElement("input", {onChange: this.addPhoto, type: "file", name: "uploads", multiple: true})
							)
						), 
						React.createElement("div", {className: "area-of-many-images"}, 
							this.state.imagesContent
						)
					), 
					React.createElement("button", {className: "save-form button", type: "submit"}, translator.SAVE)
				)
			)
		);
	}
})

var PortfolioEditTemplateElse = React.createClass({displayName: "PortfolioEditTemplateElse",
	updateDescription: function(event){
		event.preventDefault();
		var input = event.target.querySelectorAll('input[type="text"]'),
			data = 'id='+this.props.data[this.props.id]._id,
			url = '/manage/Portfolio',
			method = 'POST',
			type = 'application/x-www-form-urlencoded',
			actionName = 'Portfolio';

		for (var i = 0; i < input.length; i++) {
			data += '&'+input[i].getAttribute('name')+'='+input[i].value
		};

		_controller_.OnlyAddNoResponseData(url, data, method, type, actionName);
	},
	render: function(){
		var translator = this.props.translator,
			data = this.props.data[this.props.id];
		return (
			React.createElement("form", {onSubmit: this.updateDescription}, 
				React.createElement("div", {className: "outer-to-add"}, 
					React.createElement("div", {className: "outer-levels-step"}, 
						React.createElement("div", {className: "right-to-desctiption"}, 
							React.createElement("input", {type: "text", className: "title-portfolio", name: "title_ru", placeholder: translator.NAME_OF_PROJECT_RU, defaultValue: data.title_ru, required: "required"}), 
							React.createElement("input", {type: "text", className: "title-portfolio", name: "title_en", placeholder: translator.NAME_OF_PROJECT_EN, defaultValue: data.title_en, required: "required"}), 
							React.createElement("input", {type: "text", className: "description-portfolio", name: "description_ru", placeholder: translator.DESCRIPTION_RU, defaultValue: data.description_ru, required: "required"}), 
							React.createElement("input", {type: "text", className: "description-portfolio", name: "description_en", placeholder: translator.DESCRIPTION_EN, defaultValue: data.description_en, required: "required"}), 
							React.createElement("input", {type: "text", className: "technology-portfolio", name: "technology", placeholder: translator.TECHNOLOGY, defaultValue: data.technology, required: "required"})
						)
					), 
					React.createElement("button", {className: "save-form button", type: "submit"}, translator.SAVE)
				)
			)
		)
	}
})


allMyComponents['PortfolioElse'] = PortfolioElse;