var Portfolio = React.createClass({displayName: "Portfolio",
		
	getInitialState: function(){
		return {
			template: MainTemplateTable,
			content: this.props.content
		}
	},

	changeTemplate: function(){
		this.setState({
			template: addTemplate
		})
	},

	componentWillReceiveProps: function(nextProps){
		this.setState({
			template: MainTemplateTable,
			content: nextProps.content
		})
	},

	render: function () {
		return (
			React.createElement("div", {className: "Portfolio height-full"}, 
				React.createElement("h1", {className: "title-for-block"}, this.props.title), 
				this.state.template ? React.createElement(this.state.template, {data: this.state.content, change: this.changeTemplate}) : React.createElement(MainTemplateTable, {data: this.state.content})
			)
		)
	}
});

var MainTemplateTable = React.createClass({displayName: "MainTemplateTable",
	
	deleteItem: function(event){
		var _id = event.target.getAttribute("data-id-path"),
			categoryId = event.target.getAttribute("data-id-category"),
			type = 'application/x-www-form-urlencoded',
			url = '/manage/Portfolio',
			actionName = 'Portfolio';

		_controller_.OnlyDelete(_id, categoryId, type, actionName, url);
	},

	render: function(){
		var TableArray = this.props.data.length > 0 ? this.props.data.map(function(item, i){
				return (
						React.createElement("tr", {key: i}, 
							React.createElement("td", null, i + 1), 
							React.createElement("td", null, item.title), 
							React.createElement("td", null, React.createElement("img", {src: item.src})), 
							React.createElement("td", null, 
								React.createElement("i", {className: "fa fa-pencil", "data-id-path": item._id, "data-id-category": item.gallery_id}), 
								React.createElement("i", {className: "fa fa-trash", "data-id-path": item._id, "data-id-category": item.gallery_id, onClick: this.deleteItem})
							)
						)
					);
		}, this) : null;	
		return(
			React.createElement("div", {className: "outer-tebles"}, 
				React.createElement("button", {onClick: this.props.change, className: "button add-portfolio"}, "Добавить работу"), 
				React.createElement("table", {className: "table-for-portfolio table"}, 
					React.createElement("thead", null, 
						React.createElement("tr", {className: "default"}, 
							React.createElement("th", null, "#"), 
							React.createElement("th", null, "Название"), 
							React.createElement("th", null, "Превью"), 
							React.createElement("th", null, "Действия")
						)
					), 
					React.createElement("tbody", null, 
						TableArray
					)
				)
			)
		);
	}
})

var addTemplate = React.createClass({displayName: "addTemplate",
	
	getInitialState: function(){
		return {
			imagesContent: [],
			imagesArray: {},
			imagesTempString: '/images/addTempPhoto.png',
			imagesTempTitleString: '/images/addTitlePhoto.png',
			imageTemp: null,
			imageTitle: null
		}
	},

	deletePhoto: function(event){
		var identify = event.target.parentNode.getAttribute('name'),
			self = this;

		delete this.state.imagesArray[identify];

		var newPreloadPhoto = this.state.imagesContent.filter(eachContent);

		function eachContent(item, i){
			if(item.props.name != identify){
				return item
			}
		}

		this.setState({
			imagesContent: newPreloadPhoto,
			imagesArray: this.state.imagesArray
		})

	},

	addPhoto: function(event, files){


		var Files = (event && event.target && event.target.files) ? event.target.files : files,
			self = this;

		for (var i = 0; i < Files.length; i++) {
			
			var reader = new FileReader();

			reader.onload = (function(theFile) {
			return function(e) {

				var Random = Math.random().toString().slice(2);

				self.state.imagesArray[Random] = theFile;

				self.state.imagesContent.push(React.createElement("span", {key: i+Math.random(), name: Random}, React.createElement("img", {src: e.target.result}), React.createElement("i", {onClick: self.deletePhoto})));

			  	self.setState({
					imagesContent: self.state.imagesContent,
					imagesArray: self.state.imagesArray
				})

			};
			})(Files[i]);

			reader.readAsDataURL(Files[i]);
			
		};

		if(event && event.target){
			event.target.value = ''
		}


	},

	tempImageToGallery: function(strings, event){

		var file = event.target.files[0],
			self = this;

		var reader = new FileReader();

		reader.onload = (function(theFile) {
		return function(e) {

			if(strings == 'title'){
				self.setState({
					imagesTempTitleString: e.target.result,
					imageTitle: theFile
				})
			} else {
				self.setState({
					imagesTempString: e.target.result,
					imageTemp: theFile
				})
			}

		};
		})(file);

		reader.readAsDataURL(file);

	},

	addFormGalery: function(event){
		event.preventDefault();
		var input = event.target.querySelectorAll('input[type="text"]'),
			data = {},
			url = '/manage/Portfolio',
			method = 'POST',
			type = null,
			actionName = 'Portfolio';

		for (var i = 0; i < input.length; i++) {
			data[input[i].name] = input[i].value;
		};

		data['upload_temp_image'] = this.state.imageTemp;
		data['upload_title_image'] = this.state.imageTitle;
		data['upload_galery_image'] = [];


		for (var i in this.state.imagesArray) {
			data['upload_galery_image'].push(this.state.imagesArray[i])
		};

		_controller_.OnlyAddNoResponseData(url, data, method, type, actionName);

	},

	onDragOver: function(event){
		event.preventDefault();
		event.stopPropagation();
		if(!this.refs.target.getDOMNode().classList.contains("-drag-start")){
			this.refs.target.getDOMNode().classList.add("-drag-start")
		}
	},

	onDrops: function(event){
		event.preventDefault();

		this.refs.target.getDOMNode().classList.remove("-drag-start")

		var files;
        if (event.dataTransfer) {
          files = event.dataTransfer.files;
        } else if (event.target) {
          files = event.target.files;
        }

        this.addPhoto(null,files);

	},

	onDragLeave: function(event){
		event.preventDefault();
		event.stopPropagation();
		this.refs.target.getDOMNode().classList.remove("-drag-start")
	},

	render: function(){
		return (
			React.createElement("form", {onSubmit: this.addFormGalery}, 
				React.createElement("div", {className: "outer-to-add"}, 
					React.createElement("div", {className: "outer-levels-step"}, 
						React.createElement("div", {className: "left-to-gen-image"}, 
							React.createElement("label", {htmlFor: "hidden_file"}, 
								React.createElement("img", {className: "add-gen-photo", src: this.state.imagesTempString}), 
								React.createElement("input", {onChange: this.tempImageToGallery.bind(this, 'temp'), type: "file", name: "upload", id: "hidden_file", required: "required"})
							), 
							React.createElement("label", {htmlFor: "hidden_files"}, 
								React.createElement("img", {className: "add-gen-photo", src: this.state.imagesTempTitleString}), 
								React.createElement("input", {onChange: this.tempImageToGallery.bind(this, 'title'), type: "file", name: "upload", id: "hidden_files", required: "required"})
							)
						), 
						React.createElement("div", {className: "right-to-desctiption"}, 
							React.createElement("input", {type: "text", className: "title-portfolio", name: "title", placeholder: "Название проекта", required: "required"}), 
							React.createElement("input", {type: "text", className: "description-portfolio", name: "description", placeholder: "Описание проекта", required: "required"}), 
							React.createElement("input", {type: "text", className: "technology-portfolio", name: "technology", placeholder: "Технологии", required: "required"}), 
							React.createElement("input", {type: "text", className: "origin-portfolio", name: "origin", placeholder: "Особенности", required: "required"})
						)
					), 
					React.createElement("div", {className: "outer-all-photos"}, 
						React.createElement("h4", null, "Добавить галерею"), 
						React.createElement("div", {draggable: "true", ref: "target", className: "add-many-images", onDragOver: this.onDragOver, onDrop: this.onDrops, onDragLeave: this.onDragLeave}, 
							React.createElement("div", {className: "area-of-drop"}, 
								React.createElement("h2", null, "Перетащить файл сюда"), 
								React.createElement("p", null, "или"), 
								React.createElement("input", {onChange: this.addPhoto, type: "file", name: "uploads", multiple: true})
							)
						), 
						React.createElement("div", {className: "area-of-many-images"}, 
							this.state.imagesContent
						)
					), 
					React.createElement("button", {className: "save-form button", type: "submit"}, "Сохранить")
				)
			)
		);
	}
})

allMyComponents['Portfolio'] = Portfolio;