var Contact = React.createClass({displayName: "Contact",
	getInitialState: function(){
		return {
			content: this.props.content,
			template: ContactTemplate
		}
	},
	componentWillReceiveProps: function(nextProps){
		this.setState({
			template: ContactTemplate,
			content: nextProps.content
		})
	},
	edit: function(){
		this.setState({
			template: EditTemplate
		})
	},
	arrayOfDatas: function(){
		var property = this.state.content[0];
		var images = (property && property.src) ? property.src : '/images/map_image_template.gif',
			phonesArray = (property && property.phone) ? property.phone.split(";") : null,
			mail = (property && property.mail) ? property.mail : null,
			adress = (property && property.adress) ? property.adress : null,
			id = (property && property._id) ? property._id : null;

		return {images: images, mail: mail, adress: adress, phones: phonesArray, id: id};
	},
	render: function () {
		var data = this.arrayOfDatas();
		return (
			React.createElement(this.state.template, {title: this.props.title, edit: this.edit, getData: data})
		);
	}
	
})

var ContactTemplate = React.createClass({displayName: "ContactTemplate",
	render: function() {
		var data = this.props.getData;
		var phones = data.phones ? data.phones.map(function(item, i){
				return React.createElement("p", {key: i}, item)
			}) : null;
		return( 
			React.createElement("div", {className: "Contact height-full"}, 
				React.createElement("h1", {className: "title-for-block"}, this.props.title), 
				React.createElement("div", {className: "outer-members"}, 
					React.createElement("i", {className: "fa fa-pencil edit-about-block", onClick: this.props.edit}), 
					React.createElement("div", {className: "block-for-slides-campany"}, 
						React.createElement("div", {className: "area-for-content"}, 
							phones, 
							React.createElement("p", null, data.adress), 
							React.createElement("p", null, data.mail)
						), 
						React.createElement("div", {className: "area-for-content"}, 
							React.createElement("img", {src: data.images})
						)
					)
				)
			)
		);
	}
})

var EditTemplate = React.createClass({displayName: "EditTemplate",
	getInitialState: function(){
		return {
			imagesTemplate: this.props.getData.images,
			imagesFile: null
		}
	},
	editContact: function(event){
		event.preventDefault();
		
		var input = event.target.querySelectorAll('input[type="text"], input[type="hidden"]'),
			data,
			url = '/manage/Contact',
			method = 'POST',
			type,
			actionName = 'Contact';


		if(this.state.imagesFile){
			data = {};
			data['upload'] = this.state.imagesFile;
			for (var i = 0; i < input.length; i++) {
				data[input[i].name] = input[i].value;
			};
			type = null;
		} else {
			data = ''
			data += 'src='+this.state.imagesTemplate+'&'
			for (var i = 0; i < input.length; i++) {
				data += input[i].name+'='+input[i].value+'&';
			};
			data = data.slice(0, -1);
			type = 'application/x-www-form-urlencoded';
		}

		_controller_.OnlyAddNoResponseData(url, data, method, type, actionName);

	},
	imageChange: function(event){
		var file = event.target.files[0],
			self = this;

		var reader = new FileReader();

		reader.onload = (function(theFile) {
		return function(e) {

			self.setState({
				imagesTemplate: e.target.result,
				imagesFile: theFile
			})

		};
		})(file);

		reader.readAsDataURL(file);
	},
	render: function() {
		var data = this.props.getData;
		return (
			React.createElement("div", {className: "Contact height-full"}, 
				React.createElement("h1", {className: "title-for-block"}, this.props.title), 
				React.createElement("div", {className: "outer-levels-step padding-block"}, 
					React.createElement("form", {onSubmit: this.editContact}, 
						React.createElement("div", {className: "outer-table"}, 
							React.createElement("div", {className: "left-to-gen-image"}, 
								React.createElement("label", {htmlFor: "hidden_file"}, 
									React.createElement("img", {className: "add-gen-photo", src: this.state.imagesTemplate}), 
									React.createElement("input", {type: "file", onChange: this.imageChange, name: "upload", id: "hidden_file"})
								)
							), 
							React.createElement("div", {className: "right-to-desctiption"}, 
								React.createElement("p", null, "Перечислить телефоны разделяя знаком ';' без пробелов между номерами."), 
								React.createElement("input", {type: "hidden", name: "id", defaultValue: data.id}), 
								React.createElement("input", {type: "text", className: "title-portfolio", name: "phone", placeholder: "Телефоны", defaultValue: data.phones ? data.phones.join(";") : null, required: "required"}), 
								React.createElement("input", {type: "text", className: "description-portfolio", name: "adress", placeholder: "Адресс", defaultValue: data.adress, required: "required"}), 
								React.createElement("input", {type: "text", className: "technology-portfolio", name: "mail", placeholder: "Email", defaultValue: data.mail, required: "required"})
							)
						), 
					React.createElement("button", {type: "submit", className: "button button-center"}, "Сохранить")
					)
				)
			)
		);
	}
});

allMyComponents['Contact'] = Contact;